#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

if ARGV.empty?
  abort "Please specify the directory, e.g. `#{File.basename($0)} .'"
elsif !File.exists?(ARGV.first)
  abort "`#{ARGV.first}' does not exist."
elsif !File.directory?(ARGV.first)
  abort "`#{ARGV.first}' is not a directory."
elsif ARGV.length > 1
  abort "Too many arguments; please specify only the directory."
end

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

files = {
  "database.yml" => unindent(<<-FILE),
    #sqlite3:
    #  adapter: sqlite3
    #  database: db_name.sqlite3

    #mysql:
    #  adapter: mysql
    #  hostname: localhost
    #  username: root
    #  password:
    #  database: db_name

    #postgresql:
    #  adapter: postgresql
    #  hostname: localhost
    #  username: postgres
    #  password:
    #  database: db_name
  FILE

  "schema.rb" => unindent(%Q(
ActiveRecord::Schema.define :version => 0 do

#  create_table "tags", :force => true do |t|
#    t.string "name"
#  end
  
end 
  ))}

base = ARGV.shift
files.each do |file, content|
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] '#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] '#{file.downcase}' exists, which could conflict with `#{file}'"
  else
    unless File.exists?(File.dirname(file))
      puts "[add] making directory '#{File.dirname(file)}'"
      FileUtils.mkdir(File.dirname(file))
    end
    puts "[add] writing '#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

puts "[done] installed!"
